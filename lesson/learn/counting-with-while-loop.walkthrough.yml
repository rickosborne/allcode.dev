$schema: "https://allcode.dev/schema/Walkthrough-v1.schema.json"
title: Counting with a `while` loop
description: Use a number counter and a `while` loop to count from 1 to 5.
sources:
  - syntaxes:
      - java
      - c
      - cpp
      - csharp
    source: |
      int count = 1;
      while (count <= 5) {
          count++;
      }
  - syntax: typescript
    source: |
      let count: number = 1;
      while (count <= 5) {
        count++;
      }
  - syntax: php
    source: |
      $count = 1;
      while ($count <= 5) {
        $count++;
      }
  - syntax: perl
    source: |
      my $count = 1;
      while ($count <= 5) {
        $count++;
      }
  - syntax: ruby
    source: |
      $count = 1
      while ($count <= 5) do
        $count++;
      end
  - syntax: bash
    source: |
      COUNT=1
      while [ $COUNT -le 5 ] ; do
        COUNT=$(( $COUNT + 1 ))
      done
  - syntax: basic
    source: |
      Dim count as Integer = 1
      While count <= 5
        count += 1
      End While
  - syntax: pascal
    source: |
      count := 1
      WHILE (count <= 5) DO
        BEGIN
          count := count + 1
        END;
  - syntax: python
    source: |
      count = 1
      while (count <= 5):
          count++
  - syntax: javascript
    source: |
      let count = 1;
      while (count <= 5) {
        count++;
      }
explanation:
  - description: A variable is defined to hold the count.
    extra: >
      There's nothing magical about the name of the variable here.
      Instead of `count`, you could use `fingers` or `place` or whatever makes the most sense to you.
    highlight:
      - selector: .variable-count-1, .bare-count-1
    refs:
      - title: Variables
        href: learn/variables
  - description: The variable is initialized with the numeric value of `1`.
    highlight:
      - selector: .number-1-1
    refs:
      - title: Variables
        href: learn/variables
  - description: The `while` keyword starts a loop block.
    highlight:
      - selector: .keyword-while
  - description: A Boolean expression is evaluated at the start of each iteration (repeat) of the loop.
    highlight:
      - selector: .line-2
    refs:
      - title: Boolean Expressions
        href: learn/boolean-expressions
      - title: Expression Evaluation
        href: learn/expression-evaluation
  - description: The **condition** evaluates to `true` as long as the value of the count is less than or equal to the number `5`.
    highlight:
      - selector: .line-2
    refs:
      - title: Boolean expressions
        href: learn/boolean-expressions
  - description: The loop body is a block which will get executed if the condition evaluates to `true`.
    extra: >
      This block is very simple and only does one thing.
      Blocks can do much more than this, and may do many things one after another.
    highlight:
      - selector: .line-4
        syntax: pascal
      - selector: .line-3
    refs:
      - title: Blocks
        href: learn/blocks
  - description: The loop body increments (adds `1` to) the count variable.
    highlight:
      - selector: .operator-coloneq-2
        syntax: pascal
      - selector: .operator-plusplus, .line-3 .operator-eq, .operator-plus+.operator-plus
    refs:
      - title: Increment and Decrement
        href: learn/increment-and-decrement
assessment:
  - question: The first time the condition is evaluated, what is the value of the `count` variable?
    answer: "`1`"
    rationale: >
      The count variable is initialized with a value of `1`.
      This value is not modified before the loop begins.
    highlight:
      - selector: .number-1-1
    refs:
      - title: Variables
        href: learn/variables
  - question: When the condition eventually evaluates to `false`, what is the value of the `count` variable?
    answer: "`6`"
    rationale: >
      The first time through the loop, the count starts at `1` and is incremented to `2`.
      Next time through, the count is modified from `2` to `3`, then `3` to `4`, and `4` to `5`.
      Because the condition expression evaluates as `true` when the count is `5`, the loop body runs a fifth time.
      In that fifth time through, the count is incremented from `5` to `6`.
      When the condition is evaluated again, it is now `false` as `6` is not less than or equal to `5`.
  - question: Which parts of the code are repeated in the loop?
    answer: The loop body, which is a block and could have many lines of code, will be executed each time the loop is repeated.
    highlight:
      - selector: .line-4
        syntax: pascal
      - selector: .line-3
    refs:
      - title: Blocks
        href: learn/blocks
  - question: How many times would the loop execute if you changed the expression from "less than or equal" to just "less than"?
    answer: "`4`"
    rationale: >
      The first time through the loop, the count starts at `1` and is incremented to `2`.
      Next time through, the count is modified from `2` to `3`, then `3` to `4`, and `4` to `5`.
      When the condition is evaluated, `5` is no longer "less than" `5`, so the condition is `false` and the loop does not run the fifth time.
    highlight:
      - selector: .operator-lte
    highlightWhen: question
  - question: What would happen if you did not increment the count variable inside the loop body?
    answer: The count would never change, leading to an infinite loop.
    rationale: >
      The count variable is initialized with the value `1`.
      If it is never updated within the loop, that value of `1` will never change, and the expression "`1` is less than or equal to `5`" will always be `true`.
      Since the condition is always `true`, the loop will never end.
    highlight:
      - selector: .operator-coloneq-2
        syntax: pascal
      - selector: .operator-plusplus, .line-3 .operator-eq, .operator-plus+.operator-plus
    highlightWhen: question
